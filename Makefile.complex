PRIV_DIR := $(MIX_APP_PATH)/priv
NIF_PATH := $(PRIV_DIR)/liblazy_html.so
C_SRC := $(shell pwd)/c_src

CPPFLAGS := -shared -fPIC -fvisibility=hidden -std=c++17 -Wall -Wextra -Wno-unused-parameter -Wno-comment
CPPFLAGS += -I$(ERTS_INCLUDE_DIR) -I$(FINE_INCLUDE_DIR)

LEXBOR_DIR := $(shell pwd)/_build/c/third_party/lexbor/$(LEXBOR_VERSION)
ifdef CC_PRECOMPILER_CURRENT_TARGET
	LEXBOR_BUILD_DIR := $(LEXBOR_DIR)/build-$(CC_PRECOMPILER_CURRENT_TARGET)
else
	LEXBOR_BUILD_DIR := $(LEXBOR_DIR)/build
endif
LEXBOR_LIB := $(LEXBOR_BUILD_DIR)/liblexbor_static.a
CPPFLAGS += -I$(LEXBOR_DIR)/source

ifdef DEBUG
	CPPFLAGS += -g
else
	CPPFLAGS += -O3
endif

ifndef TARGET_ABI
  TARGET_ABI := $(shell uname -s | tr '[:upper:]' '[:lower:]')
endif

ifeq ($(TARGET_ABI),darwin)
	CPPFLAGS += -undefined dynamic_lookup -flat_namespace
endif

SOURCES := $(wildcard $(C_SRC)/*.cpp)

# Lexbor wrapper for Zigler
WRAPPER_OBJ := $(shell pwd)/_build/lexbor_wrapper.o
WRAPPER_SRC := $(C_SRC)/lexbor_wrapper_standalone.c

# Zig NIF compilation
ZIG_SRC := $(shell pwd)/zig_src
ZIG_NIF_PATH := $(PRIV_DIR)/liblazy_html_zig.so
ZIG_MAIN := $(ZIG_SRC)/lazy_html_nif.zig

all: $(NIF_PATH) $(WRAPPER_OBJ)
	@ echo > /dev/null # Dummy command to avoid the default output "Nothing to be done".

$(NIF_PATH): $(SOURCES) $(LEXBOR_LIB)
	@ mkdir -p $(PRIV_DIR)
	$(CXX) $(CPPFLAGS) $(SOURCES) $(LEXBOR_LIB) -o $(NIF_PATH)

$(WRAPPER_OBJ): $(WRAPPER_SRC) $(LEXBOR_LIB)
	@ mkdir -p $(shell dirname $(WRAPPER_OBJ))
	$(CC) -c -fPIC -I$(LEXBOR_DIR)/source $(WRAPPER_SRC) -o $(WRAPPER_OBJ)

# Zig NIF compilation
$(ZIG_NIF_PATH): $(ZIG_MAIN) $(LEXBOR_LIB) $(WRAPPER_OBJ)
	@ mkdir -p $(PRIV_DIR)
	@ # Check if zig is available
	@ which zig > /dev/null 2>&1 || (echo "Warning: Zig not found, skipping Zig NIF compilation" && exit 0)
	@ echo "Building Zig NIF with ReleaseFast optimization..."
	@ # First compile to object file
	zig build-obj $(ZIG_MAIN) \
		-fPIC \
		-I$(ERTS_INCLUDE_DIR) \
		-I$(LEXBOR_DIR)/source \
		-I$(shell pwd)/c_headers \
		-O ReleaseFast \
		-femit-bin=$(ZIG_NIF_PATH).o
	@ # Then link with system linker allowing undefined symbols
	$(CC) -shared -undefined dynamic_lookup -o $(ZIG_NIF_PATH) \
		$(ZIG_NIF_PATH).o \
		$(LEXBOR_LIB) \
		$(WRAPPER_OBJ) \
		-lc

$(LEXBOR_LIB): $(LEXBOR_DIR)
	@ mkdir -p $(LEXBOR_BUILD_DIR)
	# We explicitly specify CMAKE_OSX_DEPLOYMENT_TARGET, otherwise cmake
	# may assume a higher version depending on the current installation.
	cd $(LEXBOR_BUILD_DIR) && \
		cmake .. -DLEXBOR_BUILD_SHARED=OFF -DLEXBOR_BUILD_STATIC=ON -DLEXBOR_BUILD_SEPARATELY=OFF \
			-DCMAKE_OSX_DEPLOYMENT_TARGET=13.0 && \
		cmake --build .

$(LEXBOR_DIR):
	@ git clone --depth 1 --branch v$(LEXBOR_VERSION) https://github.com/lexbor/lexbor.git $(LEXBOR_DIR)

clean:
	rm -f $(NIF_PATH) $(WRAPPER_OBJ) $(ZIG_NIF_PATH)
	rm -rf $(LEXBOR_BUILD_DIR)

.PHONY: all clean
